/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_kyogen_free(a: number): void;
export function __wbg_get_kyogen_core_id(a: number): number;
export function __wbg_set_kyogen_core_id(a: number, b: number): void;
export function __wbg_get_kyogen_registry_id(a: number): number;
export function __wbg_set_kyogen_registry_id(a: number, b: number): void;
export function __wbg_get_kyogen_kyogen_id(a: number): number;
export function __wbg_set_kyogen_kyogen_id(a: number, b: number): void;
export function __wbg_get_kyogen_payer(a: number): number;
export function __wbg_set_kyogen_payer(a: number, b: number): void;
export function kyogen_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function kyogen_initialize(a: number, b: number): number;
export function kyogen_register_blueprint(a: number, b: number, c: number, d: number, e: number): number;
export function kyogen_register_pack(a: number, b: number, c: number, d: number): number;
export function kyogen_create_game_instance(a: number, b: number, c: number): number;
export function kyogen_change_game_state(a: number, b: number, c: number, d: number, e: number): number;
export function kyogen_init_map(a: number, b: number, c: number, d: number, e: number): number;
export function kyogen_init_tile(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function kyogen_init_player(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function kyogen_claim_spawn(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function kyogen_spawn_unit(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function kyogen_move_unit(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function kyogen_attack_unit(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function kyogen_close_entity(a: number, b: number, c: number): number;
export function kyogen_get_kyogen_signer_str(a: number, b: number, c: number): void;
export function kyogen_get_pack_key(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_structures_free(a: number): void;
export function __wbg_get_structures_payer(a: number): number;
export function __wbg_set_structures_payer(a: number, b: number): void;
export function structures_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function structures_initialize(a: number, b: number): number;
export function structures_init_structure_index(a: number, b: number, c: number, d: number): number;
export function structures_init_structure(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function structures_use_meteor(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function structures_use_portal(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function structures_use_lootable(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function structures_claim_victory(a: number, b: number, c: number, d: number): number;
export function structures_close_structure(a: number, b: number, c: number): number;
export function structures_get_structures_signer_str(a: number, b: number, c: number): void;
export function structures_get_structures_index(a: number, b: number, c: number): void;
export function componentindex_new(a: number, b: number): number;
export function componentindex_insert_component_url(a: number, b: number, c: number): void;
export function componentindex_get_component_pubkey_as_str(a: number, b: number, c: number, d: number): void;
export function componentindex_get_component_pubkey(a: number, b: number, c: number): number;
export function componentindex_get_component_url(a: number, b: number, c: number, d: number): void;
export function __wbg_registry_free(a: number): void;
export function registry_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function registry_initialize(a: number): number;
export function registry_register_component(a: number, b: number, c: number): number;
export function registry_register_action_bundle(a: number, b: number, c: number): number;
export function registry_add_components_to_action_bundle_registration(a: number, b: number, c: number, d: number): number;
export function registry_append_registry_index(a: number, b: number, c: number, d: number): number;
export function registry_get_registry_signer_str(a: number, b: number, c: number): void;
export function __wbg_blueprintindex_free(a: number): void;
export function blueprintindex_new(a: number, b: number): number;
export function blueprintindex_insert_blueprint_name(a: number, b: number, c: number): void;
export function blueprintindex_get_blueprint_name(a: number, b: number, c: number, d: number): void;
export function blueprintindex_get_blueprint_key(a: number, b: number, c: number, d: number): void;
export function __wbg_gamestate_free(a: number): void;
export function __wbg_get_gamestate_kyogen_id(a: number): number;
export function __wbg_set_gamestate_kyogen_id(a: number, b: number): void;
export function __wbg_get_gamestate_registry_id(a: number): number;
export function __wbg_set_gamestate_registry_id(a: number, b: number): void;
export function __wbg_get_gamestate_coreds_id(a: number): number;
export function __wbg_set_gamestate_coreds_id(a: number, b: number): void;
export function __wbg_get_gamestate_structures_id(a: number): number;
export function __wbg_set_gamestate_structures_id(a: number, b: number): void;
export function __wbg_get_gamestate_instance(a: number): number;
export function __wbg_set_gamestate_instance(a: number, b: number): void;
export function gamestate_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function gamestate_add_blueprints(a: number, b: number): void;
export function gamestate_get_blueprint_name(a: number, b: number, c: number, d: number): void;
export function gamestate_get_blueprint_key(a: number, b: number, c: number, d: number): void;
export function gamestate_get_play_phase(a: number, b: number): void;
export function gamestate_get_map_id(a: number, b: number): void;
export function gamestate_get_current_high_score(a: number): number;
export function gamestate_get_game_config(a: number): number;
export function gamestate_update_index(a: number): number;
export function gamestate_load_state(a: number): number;
export function gamestate_update_entity(a: number, b: number): number;
export function gamestate_get_tile_id(a: number, b: number, c: number, d: number): void;
export function gamestate_get_structure_id(a: number, b: number, c: number, d: number): void;
export function gamestate_get_tile_json(a: number, b: number): number;
export function gamestate_get_structure_json(a: number, b: number): number;
export function gamestate_get_troop_json(a: number, b: number): number;
export function gamestate_get_map(a: number): number;
export function gamestate_get_players(a: number): number;
export function gamestate_get_player_json(a: number, b: number): number;
export function gamestate_get_playerjson_by_key(a: number, b: number, c: number): number;
export function __wbg_statelesssdk_free(a: number): void;
export function statelesssdk_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function statelesssdk_fetch_addresses(a: number, b: number): number;
export function statelesssdk_fetch_address_by_id(a: number, b: number, c: number, d: number): void;
export function statelesssdk_get_player_json(a: number, b: number, c: number, d: number): number;
export function statelesssdk_get_player_json_2(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function statelesssdk_get_tile_json(a: number, b: number, c: number, d: number): number;
export function statelesssdk_get_tile_json_2(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function statelesssdk_get_structure_json(a: number, b: number, c: number, d: number): number;
export function statelesssdk_get_structure_json_2(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function statelesssdk_get_troop_json(a: number, b: number, c: number, d: number): number;
export function statelesssdk_get_troop_json_2(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_set_structures_core_id(a: number, b: number): void;
export function __wbg_set_structures_registry_id(a: number, b: number): void;
export function __wbg_set_structures_kyogen_id(a: number, b: number): void;
export function __wbg_set_structures_structures_id(a: number, b: number): void;
export function __wbg_set_statelesssdk_kyogen_id(a: number, b: number): void;
export function __wbg_set_statelesssdk_registry_id(a: number, b: number): void;
export function __wbg_set_statelesssdk_coreds_id(a: number, b: number): void;
export function __wbg_set_statelesssdk_structures_id(a: number, b: number): void;
export function __wbg_componentindex_free(a: number): void;
export function __wbg_get_structures_core_id(a: number): number;
export function __wbg_get_structures_registry_id(a: number): number;
export function __wbg_get_structures_kyogen_id(a: number): number;
export function __wbg_get_structures_structures_id(a: number): number;
export function __wbg_get_statelesssdk_kyogen_id(a: number): number;
export function __wbg_get_statelesssdk_registry_id(a: number): number;
export function __wbg_get_statelesssdk_coreds_id(a: number): number;
export function __wbg_get_statelesssdk_structures_id(a: number): number;
export function __wbg_keypair_free(a: number): void;
export function __wbg_transaction_free(a: number): void;
export function keypair_constructor(): number;
export function keypair_toBytes(a: number, b: number): void;
export function keypair_fromBytes(a: number, b: number, c: number): void;
export function keypair_pubkey(a: number): number;
export function transaction_constructor(a: number, b: number): number;
export function transaction_message(a: number): number;
export function transaction_messageData(a: number, b: number): void;
export function transaction_verify(a: number, b: number): void;
export function transaction_partialSign(a: number, b: number, c: number): void;
export function transaction_isSigned(a: number): number;
export function transaction_toBytes(a: number, b: number): void;
export function transaction_fromBytes(a: number, b: number, c: number): void;
export function __wbg_hash_free(a: number): void;
export function __wbg_instruction_free(a: number): void;
export function __wbg_message_free(a: number): void;
export function __wbg_get_message_recent_blockhash(a: number): number;
export function __wbg_set_message_recent_blockhash(a: number, b: number): void;
export function hash_constructor(a: number, b: number): void;
export function hash_toString(a: number, b: number): void;
export function hash_equals(a: number, b: number): number;
export function hash_toBytes(a: number, b: number): void;
export function __wbg_instructions_free(a: number): void;
export function instructions_constructor(): number;
export function instructions_push(a: number, b: number): void;
export function pubkey_constructor(a: number, b: number): void;
export function pubkey_isOnCurve(a: number): number;
export function pubkey_createWithSeed(a: number, b: number, c: number, d: number, e: number): void;
export function pubkey_createProgramAddress(a: number, b: number, c: number, d: number): void;
export function pubkey_findProgramAddress(a: number, b: number, c: number, d: number): void;
export function systeminstruction_createAccount(a: number, b: number, c: number, d: number, e: number): number;
export function systeminstruction_createAccountWithSeed(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function systeminstruction_assign(a: number, b: number): number;
export function systeminstruction_assignWithSeed(a: number, b: number, c: number, d: number, e: number): number;
export function systeminstruction_transfer(a: number, b: number, c: number): number;
export function systeminstruction_transferWithSeed(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function systeminstruction_allocate(a: number, b: number): number;
export function systeminstruction_allocateWithSeed(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function systeminstruction_createNonceAccount(a: number, b: number, c: number, d: number): number;
export function systeminstruction_advanceNonceAccount(a: number, b: number): number;
export function systeminstruction_withdrawNonceAccount(a: number, b: number, c: number, d: number): number;
export function systeminstruction_authorizeNonceAccount(a: number, b: number, c: number): number;
export function solana_program_init(): void;
export function pubkey_toBytes(a: number, b: number): void;
export function pubkey_equals(a: number, b: number): number;
export function __wbg_pubkey_free(a: number): void;
export function pubkey_toString(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h33136d33cc3ec279(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h2ecf3afdb072861a(a: number, b: number, c: number, d: number): void;
